import pandas as pd
import matplotlib.pyplot as plt
import numpy as np

def sigmoid(x):
    return 1 / (1 + np.exp(-x))

def sigmoid_derivative(x):
    return x * (1 - x)

def train_perceptron_XOR(data, targets, lr=0.1, epochs=10000):
    # Initialize weights and biases
    input_size = 2
    hidden_size = 2
    output_size = 1
    
    w1 = np.random.rand(input_size, hidden_size)
    w2 = np.random.rand(hidden_size, output_size)
    b1 = np.zeros((1, hidden_size))
    b2 = np.zeros((1, output_size))
    
    rows = []
    errors = []
    
    for epoch in range(epochs):
        total_error = 0
        for (x1, x2), t in zip(data, targets):
            x = np.array([[x1, x2]])
            t = np.array([[t]])
            
            # Forward pass
            hidden = sigmoid(np.dot(x, w1) + b1)
            output = sigmoid(np.dot(hidden, w2) + b2)
            
            # Compute error
            error = t - output
            total_error += np.abs(error[0][0])
            
            # Backpropagation
            d_output = error * sigmoid_derivative(output)
            d_hidden = d_output.dot(w2.T) * sigmoid_derivative(hidden)
            
            w2 += hidden.T.dot(d_output) * lr
            b2 += np.sum(d_output, axis=0, keepdims=True) * lr
            w1 += x.T.dot(d_hidden) * lr
            b1 += np.sum(d_hidden, axis=0, keepdims=True) * lr

            # Append results including epoch to rows
            rows.append([epoch + 1, x1, x2, output[0][0], error[0][0]])
        
        errors.append(total_error)
        if epoch % 1000 == 0:  # Print error for every 1000 epochs
            print(f"Epoch {epoch} Error: {total_error}")
        
        if total_error == 0:
            print(f"Converged in epoch {epoch + 1}")
            break

    # Convert rows to DataFrame and display
    df = pd.DataFrame(rows, columns=["Epoch", "x1", "x2", "y", "error"])
    print(df)

    # Plot error over iterations
    plt.plot(errors)
    plt.xlabel('Epochs')
    plt.ylabel('Total Error')
    plt.title('Error Over Iterations')
    plt.show()

    return w1, w2, b1, b2

# XOR dataset
data = [(0, 0), (0, 1), (1, 0), (1, 1)]
targets = [0, 1, 1, 0]

# Train and display results
train_perceptron_XOR(data, targets)
